#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// layers
#define L_DEF   0
#define L_LFT   1
#define L_RGT   2
#define L_TRD   3
#define L_GAM   4
#define L_TAI   5

// redefine to fit width of three
#define TRN     &trans
#define NON     &none
#define KEY     &kp
#define BLU     &bt
#define REP     &key_repeat
#define BTL     &bootloader
#define CAP     &caps_word
#define RES     &kp 0

// redefine to fit width of five
#define BTCLR   BT_CLR
#define BT1     BT_SEL 0
#define BT2     BT_SEL 1
#define BT3     BT_SEL 2
#define BT4     BT_SEL 3
#define BT5     BT_SEL 4
#define VOLUP   C_VOL_UP
#define VOLDN   C_VOL_DN
#define MUTE    K_MUTE
#define PREV    C_PREV
#define NEXT    C_NEXT

// shortcuts
#define UML     &hm LA(U)
#define ESZ     &hm LA(S)
#define UDO     &hm LG(Z)
#define CPY     &hm LG(C)
#define KUT     &hm LG(X)
#define SAV     &hm LG(S)
#define PST     &hm LG(V)
#define FRT     &hm RET
#define FES     &hm ESC
#define FTA     &hm TAB

// home row mods
#define LMS     &hm LSHFT
#define LMC     &hm LCTRL
#define LMA     &hm LALT
#define LMM     &hm LMETA
#define RMS     &hm RSHFT
#define RMC     &hm RCTRL
#define RMA     &hm RALT
#define RMM     &hm RMETA

// layer toggles
#define LM1     &lm L_LFT
#define LM2     &lm L_RGT
#define LM3     &rm L_TRD 0
#define DEF     &to L_DEF

// taipo
#define LUI 13
#define LDI 23
#define LUM 12
#define LDM 22
#define LUR 11
#define LDR 21
#define LUP 10
#define LDP 20
#define LUT 31
#define LDT 30
#define LBI 13 23
#define LBM 12 22
#define LBR 11 21
#define LBP 10 20
#define LBT 31 30

#define RUI 16
#define RDI 26
#define RUM 17
#define RDM 27
#define RUR 18
#define RDR 28
#define RUP 19
#define RDP 29
#define RUT 32
#define RDT 33
#define RBI 16 26
#define RBM 17 27
#define RBR 18 28
#define RBP 19 29
#define RBT 32 33

#define MERGE_(a,b)  a##b
#define LABEL_(a) MERGE_(combo_, a)
#define UNIQUE_COMBO LABEL_(__LINE__)

#define COMBO(KEYPOS, BINDING)     \
    UNIQUE_COMBO {                 \
        layers = <L_TAI>;          \
        timeout-ms = <50>;         \
        key-positions = <KEYPOS>;  \
        bindings = <&kp BINDING>;  \
    };

/ {
  combos {
    compatible = "zmk,combos";
        // thumbs
        COMBO(LDT                ,              BSPC)
        COMBO(RDT                ,              BSPC)
        COMBO(LUT                ,               SPC)
        COMBO(RUT                ,               SPC)

        // letters
        COMBO(                LDP,                 A)
        COMBO(                RDP,                 A)
        COMBO(            LUR LUP,                 B)
        COMBO(            RUR RUP,                 B)
        COMBO(    LDI     LDR    ,                 C)
        COMBO(    RDI     RDR    ,                 C)
        COMBO(    LDI         LDP,                 D)
        COMBO(    RDI         RDP,                 D)
        COMBO(    LDI            ,                 E)
        COMBO(    RDI            ,                 E)
        COMBO(    LUI     LUR    ,                 F)
        COMBO(    RUI     RUR    ,                 F)
        COMBO(    LUI         LUP,                 G)
        COMBO(    RUI         RUP,                 G)
        COMBO(    LDI LDM        ,                 H)
        COMBO(    RDI RDM        ,                 H)
        COMBO(    LUI            ,                 I)
        COMBO(    RUI            ,                 I)
        COMBO(        LUM     LDP,                 J)
        COMBO(        RUM     RDP,                 J)
        COMBO(    LUI     LDR    ,                 K)
        COMBO(    RUI     RDR    ,                 K)
        COMBO(            LDR LDP,                 L)
        COMBO(            RDR RDP,                 L)
        COMBO(    LDI         LUP,                 M)
        COMBO(    RDI         RUP,                 M)
        COMBO(        LUM        ,                 N)
        COMBO(        RUM        ,                 N)
        COMBO(            LDR    ,                 O)
        COMBO(            RDR    ,                 O)
        COMBO(        LUM LUR    ,                 P)
        COMBO(        RUM RUR    ,                 P)
        COMBO(        LDM     LDP,                 Q)
        COMBO(        RDM     RDP,                 Q)
        COMBO(                LUP,                 R)
        COMBO(                RUP,                 R)
        COMBO(            LUR    ,                 S)
        COMBO(            RUR    ,                 S)
        COMBO(        LDM        ,                 T)
        COMBO(        RDM        ,                 T)
        COMBO(        LDM LDR    ,                 U)
        COMBO(        RDM RDR    ,                 U)
        COMBO(    LDI     LUR    ,                 V)
        COMBO(    RDI     RUR    ,                 V)
        COMBO(    LUI         LDP,                 W)
        COMBO(    RUI         RDP,                 W)
        COMBO(        LDM     LUP,                 X)
        COMBO(        RDM     RUP,                 X)
        COMBO(    LUI LUM        ,                 Y)
        COMBO(    RUI RUM        ,                 Y)
        COMBO(        LUM     LUP,                 Z)
        COMBO(        RUM     RUP,                 Z)
        
        // capital letters
        COMBO(LUT             LDP,             LS(A))
        COMBO(RUT             RDP,             LS(A))
        COMBO(LUT         LUR LUP,             LS(B))
        COMBO(RUT         RUR RUP,             LS(B))
        COMBO(LUT LDI     LDR    ,             LS(C))
        COMBO(RUT RDI     RDR    ,             LS(C))
        COMBO(LUT LDI         LDP,             LS(D))
        COMBO(RUT RDI         RDP,             LS(D))
        COMBO(LUT LDI            ,             LS(E))
        COMBO(RUT RDI            ,             LS(E))
        COMBO(LUT LUI     LUR    ,             LS(F))
        COMBO(RUT RUI     RUR    ,             LS(F))
        COMBO(LUT LUI         LUP,             LS(G))
        COMBO(RUT RUI         RUP,             LS(G))
        COMBO(LUT LDI LDM        ,             LS(H))
        COMBO(RUT RDI RDM        ,             LS(H))
        COMBO(LUT LUI            ,             LS(I))
        COMBO(RUT RUI            ,             LS(I))
        COMBO(LUT     LUM     LDP,             LS(J))
        COMBO(RUT     RUM     RDP,             LS(J))
        COMBO(LUT LUI     LDR    ,             LS(K))
        COMBO(RUT RUI     RDR    ,             LS(K))
        COMBO(LUT         LDR LDP,             LS(L))
        COMBO(RUT         RDR RDP,             LS(L))
        COMBO(LUT LDI         LUP,             LS(M))
        COMBO(RUT RDI         RUP,             LS(M))
        COMBO(LUT     LUM        ,             LS(N))
        COMBO(RUT     RUM        ,             LS(N))
        COMBO(LUT         LDR    ,             LS(O))
        COMBO(RUT         RDR    ,             LS(O))
        COMBO(LUT     LUM LUR    ,             LS(P))
        COMBO(RUT     RUM RUR    ,             LS(P))
        COMBO(LUT     LDM     LDP,             LS(Q))
        COMBO(RUT     RDM     RDP,             LS(Q))
        COMBO(LUT             LUP,             LS(R))
        COMBO(RUT             RUP,             LS(R))
        COMBO(LUT         LUR    ,             LS(S))
        COMBO(RUT         RUR    ,             LS(S))
        COMBO(LUT     LDM        ,             LS(T))
        COMBO(RUT     RDM        ,             LS(T))
        COMBO(LUT     LDM LDR    ,             LS(U))
        COMBO(RUT     RDM RDR    ,             LS(U))
        COMBO(LUT LDI     LUR    ,             LS(V))
        COMBO(RUT RDI     RUR    ,             LS(V))
        COMBO(LUT LUI         LDP,             LS(W))
        COMBO(RUT RUI         RDP,             LS(W))
        COMBO(LUT     LDM     LUP,             LS(X))
        COMBO(RUT     RDM     RUP,             LS(X))
        COMBO(LUT LUI LUM        ,             LS(Y))
        COMBO(RUT RUI RUM        ,             LS(Y))
        COMBO(LUT     LUM     LUP,             LS(Z))
        COMBO(RUT     RUM     RUP,             LS(Z))

        // numbers
        COMBO(LDT LDI LDM        ,                N0)
        COMBO(RDT RDI RDM        ,                N0)
        COMBO(LDT LDI     LDR    ,                N1)
        COMBO(RDT RDI     RDR    ,                N1)
        COMBO(LDT     LDM LDR    ,                N2)
        COMBO(RDT     RDM RDR    ,                N2)
        COMBO(LDT     LDM     LDP,                N3)
        COMBO(RDT     RDM     RDP,                N3)
        COMBO(LDT         LDR LDP,                N4)
        COMBO(RDT         RDR RDP,                N4)
        COMBO(LDT LUI LUM        ,                N5)
        COMBO(RDT RUI RUM        ,                N5)
        COMBO(LDT LUI     LUR    ,                N6)
        COMBO(RDT RUI     RUR    ,                N6)
        COMBO(LDT     LUM LUR    ,                N7)
        COMBO(RDT     RUM RUR    ,                N7)
        COMBO(LDT     LUM     LUP,                N8)
        COMBO(RDT     RUM     RUP,                N8)
        COMBO(LDT         LUR LUP,                N9)
        COMBO(RDT         RUR RUP,                N9)

        // symbols
        COMBO(LDT LDI            ,              LPAR)
        COMBO(RDT RDI            ,              LPAR)
        COMBO(LDT LUI            ,              RPAR)
        COMBO(RDT RUI            ,              RPAR)
        COMBO(LDT     LDM        ,              LBKT)
        COMBO(RDT     RDM        ,              LBKT)
        COMBO(LDT     LUM        ,              RBKT)
        COMBO(RDT     RUM        ,              RBKT)
        COMBO(LDT         LDR    ,              LBRC)
        COMBO(RDT         RDR    ,              LBRC)
        COMBO(LDT         LUR    ,              RBRC)
        COMBO(RDT         RUR    ,              RBRC)
        COMBO(LDT             LDP,                LT)
        COMBO(RDT             RDP,                LT)
        COMBO(LDT             LUP,                GT)
        COMBO(RDT             RUP,                GT)
        COMBO(    LUI LDM        ,             QMARK)
        COMBO(    RUI RDM        ,             QMARK)
        COMBO(    LDI LUM        ,             COMMA)
        COMBO(    RDI RUM        ,             COMMA)
        COMBO(        LUM LDR    ,             MINUS)
        COMBO(        RUM RDR    ,             MINUS)
        COMBO(        LDM LUR    ,              FSLH)
        COMBO(        RDM RUR    ,              FSLH)
        COMBO(            LUR LDP,               SQT)
        COMBO(            RUR RDP,               SQT)
        COMBO(            LDR LUP,              SEMI)
        COMBO(            RDR RUP,              SEMI)
        COMBO(LUT LUI LDM        ,              EXCL)
        COMBO(RUT RUI RDM        ,              EXCL)
        COMBO(LUT LDI LUM        ,               DOT)
        COMBO(RUT RDI RUM        ,               DOT)
        COMBO(LUT     LUM LDR    ,             UNDER)
        COMBO(RUT     RUM RDR    ,             UNDER)
        COMBO(LUT     LDM LUR    ,              BSLH)
        COMBO(RUT     RDM RUR    ,              BSLH)
        COMBO(LUT         LUR LDP,               DQT)
        COMBO(RUT         RUR RDP,               DQT)
        COMBO(LUT         LDR LUP,             COLON)
        COMBO(RUT         RDR RUP,             COLON)
        COMBO(LDT LUI LDM        ,             LA(U))
        COMBO(RDT RUI RDM        ,             LA(U))
        COMBO(LDT LDI LUM        ,             TILDE)
        COMBO(RDT RDI RUM        ,             TILDE)
        COMBO(LDT LDI     LUR    ,              STAR)
        COMBO(RDT RDI     RUR    ,              STAR)
        COMBO(LDT LUI     LDR    ,              PLUS)
        COMBO(RDT RUI     RDR    ,              PLUS)
        COMBO(LDT LUI         LDP,              AMPS)
        COMBO(RDT RUI         RDP,              AMPS)
        COMBO(LDT LDI         LUP,              DLLR)
        COMBO(RDT RDI         RUP,              DLLR)
        COMBO(LDT LUI         LUP,              HASH)
        COMBO(RDT RUI         RUP,              HASH)
        COMBO(LDT LDI         LDP,                AT)
        COMBO(RDT RDI         RDP,                AT)
        COMBO(LDT     LUM LDR    ,             PRCNT)
        COMBO(RDT     RUM RDR    ,             PRCNT)
        COMBO(LDT     LDM LUR    ,              PIPE)
        COMBO(RDT     RDM RUR    ,              PIPE)
        COMBO(LDT     LDM     LUP,             CARET)
        COMBO(RDT     RDM     RUP,             CARET)
        COMBO(LDT     LUM     LDP,             EQUAL)
        COMBO(RDT     RUM     RDP,             EQUAL)
        COMBO(LDT         LUR LDP,             GRAVE)
        COMBO(RDT         RUR RDP,             GRAVE)
        COMBO(LDT         LDR LUP,             LA(S))
        COMBO(RDT         RDR RUP,             LA(S))

        // shortcuts + media
        COMBO(    LDI LDM LDR    ,             ENTER)
        COMBO(    RDI RDM RDR    ,             ENTER)
        COMBO(    LUI LUM LUR    ,               TAB)
        COMBO(    RUI RUM RUR    ,               TAB)
        COMBO(LUT LDI LDM LDR    ,               ESC)
        COMBO(RUT RDI RDM RDR    ,               ESC)
        COMBO(LUT LUI LUM LUR    ,               DEL)
        COMBO(RUT RUI RUM RUR    ,               DEL)
        COMBO(LDT LDI LDM LDR    ,              C_PP)
        COMBO(RDT RDI RDM RDR    ,              C_PP)
        COMBO(LDT LUI LUM LUR    ,              MUTE)
        COMBO(RDT RUI RUM RUR    ,              MUTE)
        COMBO(    LUI LUM LDR    ,             LG(Z))
        COMBO(    RDI RUM RUR    ,             LG(Z))
        COMBO(    LDI LUM LUR    ,         LS(LG(Z)))
        COMBO(    RUI RUM RDR    ,         LS(LG(Z)))
        COMBO(    LDI LUM LDR    ,             LG(C))
        COMBO(    RDI RUM RDR    ,             LG(C))
        COMBO(    LUI LDM LUR    ,             LG(V))
        COMBO(    RUI RDM RUR    ,             LG(V))
        COMBO(LUT LUI LUM LDR    ,                 0)
        COMBO(RUT RDI RUM RUR    ,                 0)
        COMBO(LUT LDI LUM LUR    ,                 0)
        COMBO(RUT RUI RUM RDR    ,                 0)
        COMBO(LUT LDI LUM LDR    ,             LG(X))
        COMBO(RUT RDI RUM RDR    ,             LG(X))
        COMBO(LUT LUI LDM LUR    ,             LG(S))
        COMBO(RUT RUI RDM RUR    ,             LG(S))
        COMBO(LDT LUI LUM LDR    ,              PREV)
        COMBO(RDT RDI RUM RUR    ,              PREV)
        COMBO(LDT LDI LUM LUR    ,              NEXT)
        COMBO(RDT RUI RUM RDR    ,              NEXT)
        COMBO(LDT LDI LUM LDR    ,             VOLUP)
        COMBO(RDT RDI RUM RDR    ,             VOLUP)
        COMBO(LDT LUI LDM LUR    ,             VOLDN)
        COMBO(RDT RUI RDM RUR    ,             VOLDN)

        // navigation
        COMBO(LBT         LDR    ,              LEFT)
        COMBO(RBT  RDI           ,              LEFT)
        COMBO(LBT  LDI           ,             RIGHT)
        COMBO(RBT         RDR    ,             RIGHT)
        COMBO(LBT     LUM        ,                UP)
        COMBO(RBT     RUM        ,                UP)
        COMBO(LBT     LDM        ,              DOWN)
        COMBO(RBT     RDM        ,              DOWN)
        COMBO(LBT         LUR    ,              HOME)
        COMBO(RBT  RUI           ,              HOME)
        COMBO(LBT  LUI           ,               END)
        COMBO(RBT         RUR    ,               END)
        COMBO(LBT             LUP,             PG_UP)
        COMBO(RBT             RUP,             PG_UP)
        COMBO(LBT             LDP,             PG_DN)
        COMBO(RBT             RDP,             PG_DN)

        // functions
        COMBO(LBT LDI     LDR    ,                F1)
        COMBO(RBT RDI     RDR    ,                F1)
        COMBO(LBT     LDM LDR    ,                F2)
        COMBO(RBT     RDM RDR    ,                F2)
        COMBO(LBT     LDM     LDP,                F3)
        COMBO(RBT     RDM     RDP,                F3)
        COMBO(LBT         LDR LDP,                F4)
        COMBO(RBT         RDR RDP,                F4)
        COMBO(LBT LUI LUM        ,                F5)
        COMBO(RBT RUI RUM        ,                F5)
        COMBO(LBT LUI     LUR    ,                F6)
        COMBO(RBT RUI     RUR    ,                F6)
        COMBO(LBT     LUM LUR    ,                F7)
        COMBO(RBT     RUM RUR    ,                F7)
        COMBO(LBT     LUM     LUP,                F8)
        COMBO(RBT     RUM     RUP,                F8)
        COMBO(LBT         LUR LUP,                F9)
        COMBO(RBT         RUR RUP,                F9)
        COMBO(LBT LDI LDM        ,               F10)
        COMBO(RBT RDI RDM        ,               F10)
        COMBO(LBT LDI LUM        ,               F11)
        COMBO(RBT RDI RUM        ,               F11)
        COMBO(LBT LUI LDM        ,               F12)
        COMBO(RBT RUI RDM        ,               F12)

        // modifiers
        COMBO(    LBI            ,             LSHFT)
        COMBO(    RBI            ,             LSHFT)
        COMBO(        LBM        ,             LCTRL)
        COMBO(        RBM        ,             LCTRL)
        COMBO(            LBR    ,              LALT)
        COMBO(            RBR    ,              LALT)
        COMBO(                LBP,             LMETA)
        COMBO(                RBP,             LMETA)
        COMBO(    LBI LBM        ,         LS(LCTRL))
        COMBO(    RBI RBM        ,         LS(LCTRL))
        COMBO(    LBI     LBR    ,          LS(LALT))
        COMBO(    RBI     RBR    ,          LS(LALT))
        COMBO(    LBI         LBP,         LS(LMETA))
        COMBO(    RBI         RBP,         LS(LMETA))
        COMBO(        LBM LBR    ,          LC(LALT))
        COMBO(        RBM RBR    ,          LC(LALT))
        COMBO(        LBM     LBP,         LC(LMETA))
        COMBO(        RBM     RBP,         LC(LMETA))
        COMBO(            LBR LBP,         LA(LMETA))
        COMBO(            RBR RBP,         LA(LMETA))
        COMBO(    LBI LBM LBR    ,      LS(LC(LALT)))
        COMBO(    RBI RBM RBR    ,      LS(LC(LALT)))
        COMBO(    LBI LBM     LBP,     LS(LC(LMETA)))
        COMBO(    RBI RBM     RBP,     LS(LC(LMETA)))
        COMBO(    LBI     LBR LBP,     LS(LA(LMETA)))
        COMBO(    RBI     RBR RBP,     LS(LA(LMETA)))
        COMBO(        LBM LBR LBP,     LC(LA(LMETA)))
        COMBO(        RBM RBR RBP,     LC(LA(LMETA)))
        COMBO(    LBI LBM LBR LBP, LS(LC(LA(LMETA))))
        COMBO(    RBI RBM RBR RBP, LS(LC(LA(LMETA))))
  };

  behaviors {
    hm: hold_mod {
      compatible = "zmk,behavior-hold-tap";
      label = "HOLD_MOD";
      #binding-cells = <2>;
      flavor = "tap-preferred";
      tapping-term-ms = <150>;
      bindings = <&kp>, <&kp>;
    };
    lm: layer_mod {
      compatible = "zmk,behavior-hold-tap";
      label = "LAYER_MOD";
      #binding-cells = <2>;
      flavor = "tap-preferred";
      tapping-term-ms = <150>;
      bindings = <&mo>, <&kp>;
    }; 
    rm: repeat_mod {
      compatible = "zmk,behavior-hold-tap";
      label = "REPEAT_MOD";
      #binding-cells = <2>;
      flavor = "tap-preferred";
      tapping-term-ms = <150>;
      bindings = <&mo>, <&key_repeat>;
    };
  };

  keymap {
    compatible = "zmk,keymap";

    default_layer {
      bindings = <
        KEY B      KEY B      UML F      ESZ P      NON        &to L_TAI  KEY L      KEY U      KEY Y      &to L_GAM
        RMM A      RMA R      RMC S      RMS T      FTA G      FRT M      RMS N      RMC E      RMA I      RMM O
        UDO Z      KUT W      CPY C      PST D      SAV V      FES K      KEY H      KEY J      KEY X      KEY Q
                                         LM1 CMMA   KEY SPC    LM3        LM2 DOT
      >;
    };
    left_layer {
        bindings = <
        KEY N7     KEY N7     KEY N8     KEY N9     NON        NON        KEY BSLH   KEY PRCNT  KEY CARET  NON
        RMM N0     RMA N4     RMC N5     RMS N6     KEY PLUS   KEY ASTRK  RMS LPAR   RMC RPAR   RMA LBRC   RMM RBRC
        KEY EQUAL  KEY N1     KEY N2     KEY N3     KEY MINUS  KEY SLASH  KEY LBKT   KEY RBKT   KEY LT     KEY GT
                                         NON        NON        KEY DEL    KEY COLON
        >;
    };
    right_layer {
        bindings = <
        KEY TILDE  KEY TILDE  KEY AT     KEY HASH   NON        NON        KEY HOME   KEY UP     KEY END    NON
        RMM UNDER  RMA GRAVE  RMC APOS   RMS DQT    KEY EXCL   KEY PG_UP  KEY LEFT   KEY DOWN   KEY RIGHT  NON
        NON        KEY DLLR   KEY AMPS   KEY PIPE   KEY QMARK  KEY PG_DN  NON        NON        NON        NON
                                         KEY SEMI   KEY BKSP   NON        NON
        >;
    };
    third_layer {
        bindings = <
        KEY F7     KEY F7     KEY F8     KEY F9     NON        NON        KEY VOLDN  KEY MUTE  KEY VOLUP   NON
        RMM F12    RMA F4     RMC F5     RMS F6     KEY F10    BLU BTCLR  RMS PREV   RMC C_PP   RMA NEXT   RMM 0
        NON        KEY F1     KEY F2     KEY F3     KEY F11    NON        BLU BT1    BLU BT2    BLU BT3    BLU BT4
                                         NON        NON        NON        NON
        >;
    };

    gaming_layer {
        bindings = <
        KEY N1     KEY N2     KEY N3     KEY N4     KEY T      DEF        NON        NON        NON        NON        
        KEY Q      KEY W      KEY E      KEY R      KEY F      NON        NON        NON        NON        NON
        KEY LC(N6) KEY V      KEY G      KEY D      KEY B      NON        NON        NON        NON        NON
                                         KEY TAB    KEY SPC    NON        NON
      >;
    }; 

    taipo_layer {
      bindings = <
        NON NON NON NON NON DEF NON NON NON NON 
        NON NON NON NON NON NON NON NON NON NON 
        NON NON NON NON NON NON NON NON NON NON 
                    NON NON NON NON   
      >;
    };   
  };
};
