#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// layers
#define L_DEF   0
#define L_LFT   1
#define L_RGT   2
#define L_TRD   3
#define L_GAM   4
#define L_TAI   5

// redefine to fit width of three
#define TRN     &trans
#define NON     &none
#define KEY     &kp
#define BLU     &bt
#define REP     &key_repeat
#define BTL     &bootloader
#define CAP     &caps_word
#define RES     &kp 0

// redefine to fit width of five
#define BTCLR   BT_CLR
#define BT1     BT_SEL 0
#define BT2     BT_SEL 1
#define BT3     BT_SEL 2
#define BT4     BT_SEL 3
#define BT5     BT_SEL 4
#define VOLUP   C_VOL_UP
#define VOLDN   C_VOL_DN
#define MUTE    K_MUTE
#define PREV    C_PREV
#define NEXT    C_NEXT

// shortcuts
#define UML     &hm LA(U)
#define ESZ     &hm LA(S)
#define UDO     &hm LG(Z)
#define CPY     &hm LG(C)
#define KUT     &hm LG(X)
#define SAV     &hm LG(S)
#define PST     &hm LG(V)
#define FRT     &hm RET
#define FES     &hm ESC
#define FTA     &hm TAB

// home row mods
#define LMS     &hm LSHFT
#define LMC     &hm LCTRL
#define LMA     &hm LALT
#define LMM     &hm LMETA
#define RMS     &hm RSHFT
#define RMC     &hm RCTRL
#define RMA     &hm RALT
#define RMM     &hm RMETA

// layer toggles
#define LM1     &lm L_LFT
#define LM2     &lm L_RGT
#define LM3     &rm L_TRD 0
#define DEF     &to L_DEF

// taipo
#define LTI 13
#define LBI 23
#define LTM 12
#define LBM 22
#define LTR 11
#define LBR 21
#define LTP 10
#define LBP 20
#define LTT 31
#define LBT 30
#define LI  13 23
#define LM  12 22
#define LR  11 21
#define LP  10 20
#define LT  31 30

#define RTI 16
#define RBI 26
#define RTM 17
#define RBM 27
#define RTR 18
#define RBR 28
#define RTP 19
#define RBP 29
#define RTT 32
#define RBT 33
#define RI  16 26
#define RM  17 27
#define RR  18 28
#define RP  19 29
#define RT  32 33

#define MERGE_(a,b)  a##b
#define LABEL_(a) MERGE_(combo_, a)
#define UNIQUE_COMBO LABEL_(__LINE__)

#define COMBO(KEYPOS, BINDING)     \
    UNIQUE_COMBO {                 \
        layers = <L_TAI>;          \
        timeout-ms = <50>;         \
        key-positions = <KEYPOS>;  \
        bindings = <&kp BINDING>;  \
    };

/ {
  combos {
    compatible = "zmk,combos";
        // thumbs
        COMBO(LBT                , BSPC)
        COMBO(RBT                , BSPC)
        COMBO(LTT                , SPC )
        COMBO(RTT                , SPC )

        // letters
        COMBO(                LBP, A)
        COMBO(                RBP, A)
        COMBO(            LTR LTP, B)
        COMBO(            RTR RTP, B)
        COMBO(    LBI     LBR    , C)
        COMBO(    RBI     RBR    , C)
        COMBO(    LBI         LBP, D)
        COMBO(    RBI         RBP, D)
        COMBO(    LBI            , E)
        COMBO(    RBI            , E)
        COMBO(    LTI     LTR    , F)
        COMBO(    RTI     RTR    , F)
        COMBO(    LTI         LTP, G)
        COMBO(    RTI         RTP, G)
        COMBO(    LBI LBM        , H)
        COMBO(    RBI RBM        , H)
        COMBO(    LTI            , I)
        COMBO(    RTI            , I)
        COMBO(        LTM     LBP, J)
        COMBO(        RTM     RBP, J)
        COMBO(    LTI     LBR    , K)
        COMBO(    RTI     RBR    , K)
        COMBO(            LBR LBP, L)
        COMBO(            RBR RBP, L)
        COMBO(    LBI         LTP, M)
        COMBO(    RBI         RTP, M)
        COMBO(        LTM        , N)
        COMBO(        RTM        , N)
        COMBO(            LBR    , O)
        COMBO(            RBR    , O)
        COMBO(        LTM LTR    , P)
        COMBO(        RTM RTR    , P)
        COMBO(        LBM     LBP, Q)
        COMBO(        RBM     RBP, Q)
        COMBO(                LTP, R)
        COMBO(                RTP, R)
        COMBO(            LTR    , S)
        COMBO(            RTR    , S)
        COMBO(        LBM        , T)
        COMBO(        RBM        , T)
        COMBO(        LBM LBR    , U)
        COMBO(        RBM RBR    , U)
        COMBO(    LBI     LTR    , V)
        COMBO(    RBI     RTR    , V)
        COMBO(    LTI         LBP, W)
        COMBO(    RTI         RBP, W)
        COMBO(        LBM     LTP, X)
        COMBO(        RBM     RTP, X)
        COMBO(    LTI LTM        , Y)
        COMBO(    RTI RTM        , Y)
        COMBO(        LTM     LTP, Z)
        COMBO(        RTM     RTP, Z)
        
        // capital letters
        COMBO(LTT             LBP, LS(A))
        COMBO(RTT             RBP, LS(A))
        COMBO(LTT         LTR LTP, LS(B))
        COMBO(RTT         RTR RTP, LS(B))
        COMBO(LTT LBI     LBR    , LS(C))
        COMBO(RTT RBI     RBR    , LS(C))
        COMBO(LTT LBI         LBP, LS(D))
        COMBO(RTT RBI         RBP, LS(D))
        COMBO(LTT LBI            , LS(E))
        COMBO(RTT RBI            , LS(E))
        COMBO(LTT LTI     LTR    , LS(F))
        COMBO(RTT RTI     RTR    , LS(F))
        COMBO(LTT LTI         LTP, LS(G))
        COMBO(RTT RTI         RTP, LS(G))
        COMBO(LTT LBI LBM        , LS(H))
        COMBO(RTT RBI RBM        , LS(H))
        COMBO(LTT LTI            , LS(I))
        COMBO(RTT RTI            , LS(I))
        COMBO(LTT     LTM     LBP, LS(J))
        COMBO(RTT     RTM     RBP, LS(J))
        COMBO(LTT LTI     LBR    , LS(K))
        COMBO(RTT RTI     RBR    , LS(K))
        COMBO(LTT         LBR LBP, LS(L))
        COMBO(RTT         RBR RBP, LS(L))
        COMBO(LTT LBI         LTP, LS(M))
        COMBO(RTT RBI         RTP, LS(M))
        COMBO(LTT     LTM        , LS(N))
        COMBO(RTT     RTM        , LS(N))
        COMBO(LTT         LBR    , LS(O))
        COMBO(RTT         RBR    , LS(O))
        COMBO(LTT     LTM LTR    , LS(P))
        COMBO(RTT     RTM RTR    , LS(P))
        COMBO(LTT     LBM     LBP, LS(Q))
        COMBO(RTT     RBM     RBP, LS(Q))
        COMBO(LTT             LTP, LS(R))
        COMBO(RTT             RTP, LS(R))
        COMBO(LTT         LTR    , LS(S))
        COMBO(RTT         RTR    , LS(S))
        COMBO(LTT     LBM        , LS(T))
        COMBO(RTT     RBM        , LS(T))
        COMBO(LTT     LBM LBR    , LS(U))
        COMBO(RTT     RBM RBR    , LS(U))
        COMBO(LTT LBI     LTR    , LS(V))
        COMBO(RTT RBI     RTR    , LS(V))
        COMBO(LTT LTI         LBP, LS(W))
        COMBO(RTT RTI         RBP, LS(W))
        COMBO(LTT     LBM     LTP, LS(X))
        COMBO(RTT     RBM     RTP, LS(X))
        COMBO(LTT LTI LTM        , LS(Y))
        COMBO(RTT RTI RTM        , LS(Y))
        COMBO(LTT     LTM     LTP, LS(Z))
        COMBO(RTT     RTM     RTP, LS(Z))

        // numbers
        COMBO(LBT LBI LBM        , N0)
        COMBO(RBT RBI RBM        , N0)
        COMBO(LBT LBI     LBR    , N1)
        COMBO(RBT RBI     RBR    , N1)
        COMBO(LBT     LBM LBR    , N2)
        COMBO(RBT     RBM RBR    , N2)
        COMBO(LBT     LBM     LBP, N3)
        COMBO(RBT     RBM     RBP, N3)
        COMBO(LBT         LBR LBP, N4)
        COMBO(RBT         RBR RBP, N4)
        COMBO(LBT LTI LTM        , N5)
        COMBO(RBT RTI RTM        , N5)
        COMBO(LBT LTI     LTR    , N6)
        COMBO(RBT RTI     RTR    , N6)
        COMBO(LBT     LTM LTR    , N7)
        COMBO(RBT     RTM RTR    , N7)
        COMBO(LBT     LTM     LTP, N8)
        COMBO(RBT     RTM     RTP, N8)
        COMBO(LBT         LTR LTP, N9)
        COMBO(RBT         RTR RTP, N9)

        // functions
        COMBO(LT  LBI     LBR    , F1)
        COMBO(RT  RBI     RBR    , F1)
        COMBO(LT      LBM LBR    , F2)
        COMBO(RT      RBM RBR    , F2)
        COMBO(LT      LBM     LBP, F3)
        COMBO(RT      RBM     RBP, F3)
        COMBO(LT          LBR LBP, F4)
        COMBO(RT          RBR RBP, F4)
        COMBO(LT  LTI LTM        , F5)
        COMBO(RT  RTI RTM        , F5)
        COMBO(LT  LTI     LTR    , F6)
        COMBO(RT  RTI     RTR    , F6)
        COMBO(LT      LTM LTR    , F7)
        COMBO(RT      RTM RTR    , F7)
        COMBO(LT      LTM     LTP, F8)
        COMBO(RT      RTM     RTP, F8)
        COMBO(LT          LTR LTP, F9)
        COMBO(RT          RTR RTP, F9)
        COMBO(LT  LBI LBM        , F10)
        COMBO(RT  RBI RBM        , F10)
        COMBO(LT  LBI LTM        , F11)
        COMBO(RT  RBI RTM        , F11)
        COMBO(LT  LTI LBM        , F12)
        COMBO(RT  RTI RBM        , F12)

        // symbols
        COMBO(LBT LBI            , LPAR)
        COMBO(RBT RBI            , LPAR)
        COMBO(LBT LTI            , RPAR)
        COMBO(RBT RTI            , RPAR)
        COMBO(LBT     LBM        , LBKT)
        COMBO(RBT     RBM        , LBKT)
        COMBO(LBT     LTM        , RBKT)
        COMBO(RBT     RTM        , RBKT)
        COMBO(LBT         LBR    , LBRC)
        COMBO(RBT         RBR    , LBRC)
        COMBO(LBT         LTR    , RBRC)
        COMBO(RBT         RTR    , RBRC)
        COMBO(LBT             LBP, LT)
        COMBO(RBT             RBP, LT)
        COMBO(LBT             LTP, GT)
        COMBO(RBT             RTP, GT)
        COMBO(    LTI LBM        , QMARK)
        COMBO(    RTI RBM        , QMARK)
        COMBO(    LBI LTM        , COMMA)
        COMBO(    RBI RTM        , COMMA)
        COMBO(        LTM LBR    , MINUS)
        COMBO(        RTM RBR    , MINUS)
        COMBO(        LBM LTR    , FSLH)
        COMBO(        RBM RTR    , FSLH)
        COMBO(            LTR LBP, SQT)
        COMBO(            RTR RBP, SQT)
        COMBO(            LBR LTP, SEMI)
        COMBO(            RBR RTP, SEMI)
        COMBO(LTT LTI LBM        , EXCL)
        COMBO(RTT RTI RBM        , EXCL)
        COMBO(LTT LBI LTM        , DOT)
        COMBO(RTT RBI RTM        , DOT)
        COMBO(LTT     LTM LBR    , UNDER)
        COMBO(RTT     RTM RBR    , UNDER)
        COMBO(LTT     LBM LTR    , BSLH)
        COMBO(RTT     RBM RTR    , BSLH)
        COMBO(LTT         LTR LBP, DQT)
        COMBO(RTT         RTR RBP, DQT)
        COMBO(LTT         LBR LTP, COLON)
        COMBO(RTT         RBR RTP, COLON)
        COMBO(LBT LTI LBM        , LA(U))
        COMBO(RBT RTI RBM        , LA(U))
        COMBO(LBT LBI LTM        , TILDE)
        COMBO(RBT RBI RTM        , TILDE)
        COMBO(LBT LBI     LTR    , STAR)
        COMBO(RBT RBI     RTR    , STAR)
        COMBO(LBT LTI     LBR    , PLUS)
        COMBO(RBT RTI     RBR    , PLUS)
        COMBO(LBT LTI         LBP, AMPS)
        COMBO(RBT RTI         RBP, AMPS)
        COMBO(LBT LBI         LTP, DLLR)
        COMBO(RBT RBI         RTP, DLLR)
        COMBO(LBT LTI         LTP, HASH)
        COMBO(RBT RTI         RTP, HASH)
        COMBO(LBT LBI         LBP, AT)
        COMBO(RBT RBI         RBP, AT)
        COMBO(LBT     LTM LBR    , PRCNT)
        COMBO(RBT     RTM RBR    , PRCNT)
        COMBO(LBT     LBM LTR    , PIPE)
        COMBO(RBT     RBM RTR    , PIPE)
        COMBO(LBT     LBM     LTP, CARET)
        COMBO(RBT     RBM     RTP, CARET)
        COMBO(LBT     LTM     LBP, EQUAL)
        COMBO(RBT     RTM     RBP, EQUAL)
        COMBO(LBT         LTR LBP, GRAVE)
        COMBO(RBT         RTR RBP, GRAVE)
        COMBO(LBT         LBR LTP, LA(S))
        COMBO(RBT         RBR RTP, LA(S))

        // shortcuts + media
        COMBO(    LBI LBM LBR    , ENTER)
        COMBO(    RBI RBM RBR    , ENTER)
        COMBO(    LTI LTM LTR    , TAB)
        COMBO(    RTI RTM RTR    , TAB)
        COMBO(LTT LBI LBM LBR    , ESC)
        COMBO(RTT RBI RBM RBR    , ESC)
        COMBO(LTT LTI LTM LTR    , DEL)
        COMBO(RTT RTI RTM RTR    , DEL)
        COMBO(LBT LBI LBM LBR    , C_PP)
        COMBO(RBT RBI RBM RBR    , C_PP)
        COMBO(LBT LTI LTM LTR    , MUTE)
        COMBO(RBT RTI RTM RTR    , MUTE)
        COMBO(    LTI LTM LBR    , LG(Z))
        COMBO(    RBI RTM RTR    , LG(Z))
        COMBO(    LBI LTM LTR    , LS(LG(Z)))
        COMBO(    RTI RTM RBR    , LS(LG(Z)))
        COMBO(    LBI LTM LBR    , LG(C))
        COMBO(    RBI RTM RBR    , LG(C))
        COMBO(    LTI LBM LTR    , LG(V))
        COMBO(    RTI RBM RTR    , LG(V))
        COMBO(LTT LTI LTM LBR    , 0)
        COMBO(RTT RBI RTM RTR    , 0)
        COMBO(LTT LBI LTM LTR    , 0)
        COMBO(RTT RTI RTM RBR    , 0)
        COMBO(LTT LBI LTM LBR    , LG(X))
        COMBO(RTT RBI RTM RBR    , LG(X))
        COMBO(LTT LTI LBM LTR    , LG(S))
        COMBO(RTT RTI RBM RTR    , LG(S))
        COMBO(LBT LTI LTM LBR    , PREV)
        COMBO(RBT RBI RTM RTR    , PREV)
        COMBO(LBT LBI LTM LTR    , NEXT)
        COMBO(RBT RTI RTM RBR    , NEXT)
        COMBO(LBT LBI LTM LBR    , VOLUP)
        COMBO(RBT RBI RTM RBR    , VOLUP)
        COMBO(LBT LTI LBM LTR    , VOLDN)
        COMBO(RBT RTI RBM RTR    , VOLDN)

        // navigation
        COMBO(LT          LBR    , LEFT)
        COMBO(RT  RBI            , LEFT)
        COMBO(LT  LBI            , RIGHT)
        COMBO(RT          RBR    , RIGHT)
        COMBO(LT      LTM        , UP)
        COMBO(RT      RTM        , UP)
        COMBO(LT      LBM        , DOWN)
        COMBO(RT      RBM        , DOWN)
        COMBO(LT          LTR    , HOME)
        COMBO(RT  RTI            , HOME)
        COMBO(LT  LTI            , END)
        COMBO(RT          RTR    , END)
        COMBO(LT              LTP, PG_UP)
        COMBO(RT              RTP, PG_UP)
        COMBO(LT              LBP, PG_DN)
        COMBO(RT              RBP, PG_DN)

        // modifiers
        COMBO(    LI             , LSHFT)
        COMBO(    RI             , LSHFT)
        COMBO(        LM         , LCTRL)
        COMBO(        RM         , LCTRL)
        COMBO(            LR     , LALT )
        COMBO(            RR     , LALT )
        COMBO(                LP , LMETA)
        COMBO(                RP , LMETA)
        COMBO(    LI  LM         , LS(LCTRL))
        COMBO(    RI  RM         , LS(LCTRL))
        COMBO(    LI      LR     , LS(LALT ))
        COMBO(    RI      RR     , LS(LALT ))
        COMBO(    LI          LP , LS(LMETA))
        COMBO(    RI          RP , LS(LMETA))
        COMBO(        LM  LR     , LC(LALT ))
        COMBO(        RM  RR     , LC(LALT ))
        COMBO(        LM      LP , LC(LMETA))
        COMBO(        RM      RP , LC(LMETA))
        COMBO(            LR  LP , LA(LMETA))
        COMBO(            RR  RP , LA(LMETA))
        COMBO(    LI  LM  LR     , LS(LC(LALT)))
        COMBO(    RI  RM  RR     , LS(LC(LALT)))
        COMBO(    LI  LM      LP , LS(LC(LMETA)))
        COMBO(    RI  RM      RP , LS(LC(LMETA)))
        COMBO(    LI      LR  LP , LS(LA(LMETA)))
        COMBO(    RI      RR  RP , LS(LA(LMETA)))
        COMBO(        LM  LR  LP , LC(LA(LMETA)))
        COMBO(        RM  RR  RP , LC(LA(LMETA)))
        COMBO(    LI  LM  LR  LP , LS(LC(LA(LMETA))))
        COMBO(    RI  RM  RR  RP , LS(LC(LA(LMETA))))
  };

  behaviors {
    hm: hold_mod {
      compatible = "zmk,behavior-hold-tap";
      label = "HOLD_MOD";
      #binding-cells = <2>;
      flavor = "tap-preferred";
      tapping-term-ms = <150>;
      bindings = <&kp>, <&kp>;
    };
    lm: layer_mod {
      compatible = "zmk,behavior-hold-tap";
      label = "LAYER_MOD";
      #binding-cells = <2>;
      flavor = "tap-preferred";
      tapping-term-ms = <150>;
      bindings = <&mo>, <&kp>;
    }; 
    rm: repeat_mod {
      compatible = "zmk,behavior-hold-tap";
      label = "REPEAT_MOD";
      #binding-cells = <2>;
      flavor = "tap-preferred";
      tapping-term-ms = <150>;
      bindings = <&mo>, <&key_repeat>;
    };
  };

  keymap {
    compatible = "zmk,keymap";

    default_layer {
      bindings = <
        KEY B      KEY B      UML F      ESZ P      NON        &to L_TAI  KEY L      KEY U      KEY Y      &to L_GAM
        RMM A      RMA R      RMC S      RMS T      FTA G      FRT M      RMS N      RMC E      RMA I      RMM O
        UDO Z      KUT W      CPY C      PST D      SAV V      FES K      KEY H      KEY J      KEY X      KEY Q
                                         LM1 CMMA   KEY SPC    LM3        LM2 DOT
      >;
    };
    left_layer {
        bindings = <
        KEY N7     KEY N7     KEY N8     KEY N9     NON        NON        KEY BSLH   KEY PRCNT  KEY CARET  NON
        RMM N0     RMA N4     RMC N5     RMS N6     KEY PLUS   KEY ASTRK  RMS LPAR   RMC RPAR   RMA LBRC   RMM RBRC
        KEY EQUAL  KEY N1     KEY N2     KEY N3     KEY MINUS  KEY SLASH  KEY LBKT   KEY RBKT   KEY LT     KEY GT
                                         NON        NON        KEY DEL    KEY COLON
        >;
    };
    right_layer {
        bindings = <
        KEY TILDE  KEY TILDE  KEY AT     KEY HASH   NON        NON        KEY HOME   KEY UP     KEY END    NON
        RMM UNDER  RMA GRAVE  RMC APOS   RMS DQT    KEY EXCL   KEY PG_UP  KEY LEFT   KEY DOWN   KEY RIGHT  NON
        NON        KEY DLLR   KEY AMPS   KEY PIPE   KEY QMARK  KEY PG_DN  NON        NON        NON        NON
                                         KEY SEMI   KEY BKSP   NON        NON
        >;
    };
    third_layer {
        bindings = <
        KEY F7     KEY F7     KEY F8     KEY F9     NON        NON        KEY VOLDN  KEY MUTE  KEY VOLUP   NON
        RMM F12    RMA F4     RMC F5     RMS F6     KEY F10    BLU BTCLR  RMS PREV   RMC C_PP   RMA NEXT   RMM 0
        NON        KEY F1     KEY F2     KEY F3     KEY F11    NON        BLU BT1    BLU BT2    BLU BT3    BLU BT4
                                         NON        NON        NON        NON
        >;
    };

    gaming_layer {
        bindings = <
        KEY N1     KEY N2     KEY N3     KEY N4     KEY T      &to L_DEF  NON        NON        NON        NON        
        KEY Q      KEY W      KEY E      KEY R      KEY F      NON        NON        NON        NON        NON
        KEY LC(N6) KEY V      KEY G      KEY D      KEY B      NON        NON        NON        NON        NON
                                         KEY TAB    KEY SPC    NON        NON
      >;
    }; 

    taipo_layer {
      bindings = <
        NON NON NON NON NON DEF NON NON NON NON 
        NON NON NON NON NON NON NON NON NON NON 
        NON NON NON NON NON NON NON NON NON NON 
                    NON NON NON NON   
      >;
    };   
  };
};
