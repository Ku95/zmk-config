#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// time until tap will count as hold
#define TIMEOUT 300

// home row mods
#define LMS &lm LSHFT
#define LMC &lm LCTRL
#define LMA &lm LALT
#define LMM &lm LMETA
#define RMS &rm LSHFT
#define RMC &rm LCTRL
#define RMA &rm LALT
#define RMM &rm LMETA

// enables umlauts and eszet
#define UML &lm RA(DQT)
#define SS  &lm RA(S)

// cut, copy, paste, etc.
#define RDO &lm LC(Z)
#define CPY &lm LC(C)
#define CUT &lm LC(X)
#define SAV &lm LC(D)
#define PST &lm LC(V)

/ {
  conditional_layers {
    compatible = "zmk,conditional-layers";

    // enables third layer if first to are enabled at the same time
    tri_layer {
        if-layers = <1 2>;
        then-layer = <3>;
      };
  };

  // enable home row mods for the other hand
  behaviors {
    lm: left_mod {
      compatible = "zmk,behavior-hold-tap";
      label = "HOMEROW_MODS_LEFT";
      #binding-cells = <2>; // number of arguments
      flavor = "tap-preferred";
      tapping-term-ms = <TIMEOUT>; // time until hold
      bindings = <&kp>, <&kp>;
      hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 32 33>; // right-hand keys
    };
    rm: right_mod {
      compatible = "zmk,behavior-hold-tap";
      label = "HOMEROW_MODS_RIGHT";
      #binding-cells = <2>; // number of arguments
      flavor = "tap-preferred";
      tapping-term-ms = <TIMEOUT>; // time until hold
      bindings = <&kp>, <&kp>;
      hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31>; // left-hand keys
    };
  };

  keymap {
    compatible = "zmk,keymap";

    // key ids
    //  0  1  2  3  4    5  6  7  8  9
    // 10 11 12 13 14   15 16 17 18 19
    // 20 21 22 23 24   25 26 27 28 29
    //          30 31   32 33

    // colemak-dh layout
 		default_layer {
	    bindings = <
      &kp Q  &kp W  UML F  SS  P    &kp B    &kp J     &kp L   &kp U     &kp Y    &kp SEMI
      RMM A  RMA R  RMC S  RMS T    &kp G    &kp M     RMS N   RMC E     RMA I    RMM O
	    RDO Z  CUT X  CPY C  SAV D    PST V	   &kp K     &kp H   &kp CMMA  &kp DOT  &kp SLASH
          				         &mo 1    &kp SPC  &kp BKSP  &mo 2
      >;
    };

    // numbers and symbols
 		left_layer {
  		bindings = <
      &kp KP_PLUS   &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_MULTIPLY  &kp PRCNT  &kp LBKT  &kp RBKT  &kp AMPS   &kp PIPE
      RMM KP_MINUS  RMA KP_N4  RMC KP_N5  RMS KP_N6  &kp KP_DIVIDE    &kp HASH   RMS LPAR  RMC RPAR  RMA UNDER  RMM BSLH
	    &kp KP_N0     &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_EQUAL 	  &kp CARET  &kp LBRC  &kp RBRC  &kp DOT    &kp SLASH
          				                        &trans     &trans           &trans     &trans
  		>;
		};

    // navigation and symbols
		right_layer {
  		bindings = <
      &kp ESC  &kp TILDE  &kp AT    &kp DLLR  &none      &kp PG_UP  &kp HOME  &kp UP    &kp END     &kp DEL
      RMM TAB  RMA DQT    RMC APOS  RMS EXCL  &kp GRAVE  &kp PG_DN  &kp LEFT  &kp DOWN  &kp RIGHT   &kp RET
	    &none    &none      &none     &none     &none	     &kp CAPS   &none	    &none     &kp KP_NUM  &kp INS
          				                  &trans    &trans     &trans     &trans
  		>;
		};

    // function and media
		tri_layer {
  		bindings = <
      &none  &kp F7  &kp F8  &kp F9  &kp F10  &bt BT_SEL 0  &kp C_VOL_DN  &kp K_MUTE  &kp C_VOL_UP  &none
      &none  &kp F4  &kp F5  &kp F6  &kp F11  &bt BT_SEL 1  RMS C_PREV    RMC C_PP    RMA C_NEXT    &kp C_PWR
	    &none  &kp F1  &kp F2  &kp F3  &kp F12  &bt BT_SEL 2  &bt BT_PRV    &bt BT_CLR  &bt BT_NXT    RMM PSCRN
          				           &trans  &trans   &trans        &trans
  		>;
		};
	};
};
